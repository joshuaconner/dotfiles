__adc_get_link() {
  # usage: __adc_get_link "path/to/file" "html5-endcards-base-text" "ua-auto-base-text"
  FILE="$1"
  HTML5_ENDCARDS_BASE="$2"
  UA_AUTO_BASE="$3"
  DEC_ENDCARDS_V2_BASE="$4"
  DEC_ENDCARDS_V3_BASE="$5"
  # get the absolute path to the file
  ABS_PATH=$(echo "$(cd "$(dirname "$FILE")" && pwd)/$(basename "$FILE")")
  REPO_NAME="$(basename $(git rev-parse --show-toplevel))"
  # get text in the absolute path to the file AFTER the base directory name
  REPO_PATH="$(echo "$ABS_PATH" | sed "s#$(git rev-parse --show-toplevel)##")"
  if [[ "$REPO_NAME" = "html5-endcards" ]]; then
    LINK="${HTML5_ENDCARDS_BASE}${REPO_PATH}"
  elif [[ "$REPO_NAME" = "dec-endcards-v2" ]]; then
    LINK="${DEC_ENDCARDS_V2_BASE}${REPO_PATH}"
  elif [[ "$REPO_NAME" = "ua-auto-endcards" ]]; then
    LINK="${UA_AUTO_BASE}${REPO_PATH}"
  elif [[ "$REPO_NAME" = "dec-endcards-2016" ]]; then
    LINK="${DEC_ENDCARDS_V3_BASE}${REPO_PATH}"
  else
    echo "Repo doesn't seem to be html5-endcards or ua-auto-endcards..." >&2
    return 1
  fi

  echo "$LINK"
  return 0
}

qa(){
  FILE="$1"
  V1QABASE="http://s3.amazonaws.com/rm.adtilt.com/rmec"
  V2QABASE="http://s3.amazonaws.com/rm2.adtilt.com"
  UAGENBASE="http://s3.amazonaws.com/ua-auto.adtilt.com"
  V3QABASE="http://s3.amazonaws.com/rm3.adtilt.com"
  REPO_NAME="$(basename $(git rev-parse --show-toplevel))"
  if [[ -e "$FILE" ]]; then
    LINK="$(__adc_get_link "$FILE" "$V1QABASE" "$UAGENBASE" "$V2QABASE" "$V3QABASE")"
    echo "$LINK"
    echo "$LINK" | pbcopy
  else
    echo "Can't can't the file/directory $FILE."
    return 1
  fi
  return 0
}

prod() {
  FILE="$1"
  V1QABASE="http://rm.adtilt.com/rmec"
  V2QABASE="http://rm2.adtilt.com"
  UAGENBASE="http://ua-auto.adtilt.com"
  V3QABASE="http://rm3.adtilt.com"
  REPO_NAME="$(basename $(git rev-parse --show-toplevel))"
  if [[ -e "$FILE" ]]; then
    LINK="$(__adc_get_link "$FILE" "$V1QABASE" "$UAGENBASE" "$V2QABASE" "$V3QABASE")"
    echo "$LINK"
    echo "$LINK" | pbcopy
  else
    echo "Can't can't the file/directory $FILE." >&2
    return 1
  fi
  return 0
}

invalidation() {
  FILE="$1"
  if [[ -e "$FILE" ]]; then
    LINK="$(__adc_get_link "$FILE" "/rmec" "" "" "")"
    echo "$LINK"
    echo "$LINK" | pbcopy
  else
    echo "Can't can't the file/directory $FILE." >&2
    return 1
  fi
  return 0
}
