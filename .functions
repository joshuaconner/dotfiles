# Simple calculator
function calc() {
	local result=""
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//'   # remove trailing zeros
	else
		printf "$result"
	fi
	printf "\n"
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"

  #sleep 1 && open "http://localhost:${port}/" &

  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}


# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en1)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
	local text
	if [ -t 0 ]; then # argument
		text="$1"
	else # pipe
		text=$(cat)
	fi
	body=$(echo "$text" | sed -E 's|$|<br>|g')
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$text", body:"$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
	for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
		xattr -r -d "$attribute" "$@"
	done
}

resize () {
    SUFFIX="-resized"
    if [ -n "$1" ] ; then
        if [ ! -f "${@: -1}" ] ; then
            SUFFIX=""
            for DEST; do true; done
            mkdir -p "$DEST"
            DEST="${DEST}/"
        fi

        geom="$1"
        shift

        while [ -n "$1" ]
          do
            if [ -f "$1" ]; then
                FILENAME=$(basename "$1")
                EXTENSION="${FILENAME##*.}"
                FILENAME="${FILENAME%.*}"

                convert -filter Lanczos2 -resize "$geom" "$1" "${DEST}${FILENAME}${SUFFIX}.${EXTENSION}"
            fi

            shift
        done
    else
        echo "Usage: resize resize-arg [file1, file2, ...] destinationDirectory"
        echo "For possible resize-arg formats, see:"
        echo "http://www.imagemagick.org/script/command-line-processing.php#geometry"
        echo ""
        echo 'If a destination directory is no specified, each filename will be appended with'
        echo '"-resized" so as to not overwrite the original files.'
    fi
}

dwatch () {
  mkdir -p ~/Dropbox/Public/adcolony
  dploy &&
  fswatch . 'printf "\n\n" && date && printf "####################################\n" && rsync --delete --exclude libraries --exclude node_modules --exclude=".*/" --progress -tr . ~/Dropbox/Public/adcolony/'
}

cwatch() {
  mkdir -p ../javascripts
  fswatch . 'printf "\n\n" && date && printf "####################################\n" && cake build'
}

# Extract most known archives with one command
extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# shortcut to commit, fetch, rebase and push to current master
gp() {
  if [ -z "$1" ] ; then
    git commit -a
  else
    git commit -am "${1}"
  fi
  gpp
}

# set the bash window's title
title() {
  echo -e '\033k'${1}'\033\\'
}

# get a random string of length $1 (default: 64)
random() {
  LENGTH=${1:-64}
  echo `cat /dev/urandom | base64 | tr -dc "[:alnum:]" | head "-c$LENGTH"`
}

# fullwidth() - converts a word into its full-width unicode equivalent
fullwidth() {
    local readonly ARGS="$@"

    # fast_chr and unichr from: http://stackoverflow.com/a/23436040/604614
    fast_chr() {
        local __octal
        local __char
        printf -v __octal '%03o' $1
        printf -v __char \\$__octal
        REPLY="$__char"
    }

    # unichr() - prints unicode character for any size number
    # see: http://stackoverflow.com/a/16509364/604614
    function unichr {
        local c=$1  # ordinal of char
        local l=0   # byte ctr
        local o=63  # ceiling
        local p=128 # accum. bits
        local s=''  # output string

        (( c < 0x80 )) && { fast_chr "$c"; echo -n "$REPLY"; return; }

        while (( c > o )); do
            fast_chr $(( t = 0x80 | c & 0x3f ))
            s="$REPLY$s"
            (( c >>= 6, l++, p += o+1, o>>=1 ))
        done

        fast_chr $(( t = p | c ))
        echo -n "$REPLY$s"
    }

    # ord() - converts ASCII character to its decimal value
    # see: http://stackoverflow.com/a/12855787/604614
    ord() {
      printf '%d' "'$1"
    }

    fullwidth_word() {
        local word=$1
        local i
        local char_code
        local fullwidth_char_code
        local fullwith_char

        # loop over characters in word
        # see: http://stackoverflow.com/a/10552175/604614
        for (( i=0; i<${#word}; i++ )); do
            char_code="$(ord ${word:$i:1})"
            fullwidth_char_code=$((char_code + 65248))
            echo -n "$(unichr ${fullwidth_char_code})"
        done
    }

    local res=""
    local fw
    local word
    for word in $ARGS; do
        fw="$(fullwidth_word $word)"
        res="$res $fw"
    done
    echo "${res:1}" | pbcopy
    echo "${res:1}"

    # delete our inner functions: http://stackoverflow.com/a/23653825/604614
    unset -f fast_chr
    unset -f unichr
    unset -f ord
    unset -f fullwidth_word
}

